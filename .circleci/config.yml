version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1
  docker: circleci/docker@2.2.0

commands:
  commands:
  install-aws-cli:
    steps:
      - run: apt-get update -y
      - run: apt-get upgrade -y
      - run: apt-get install -y tar gzip zip unzip
      - aws-cli/setup

  list-packages:
    steps:
      - run:
          name: Extract the package reference lines
          command: |
            cp ./src/*/*.csproj .
            for path in $(ls *.csproj)
            do
                echo $path
                while read -r line; do
                    if [[ $line =~ "<PackageReference" ]]; then
                        echo "${line// /}" >> packages.txt
                    fi  
                done < "$path"
            done
            rm *.csproj
            cat packages.txt

  copy-obj:
    steps:
      - run:
          name: Copy obj folders
          command: |
            for path in $(find . -regex '.*/obj')
            do
                echo $path
                mkdir -p objs/$path
                cp -r $path/. objs/$path/
            done
            tar -czf objs.tar.gz -C objs .
            tar -tf objs.tar.gz

  restore-packages:
    steps:
      - run:
          name: Restore package from cache if no changes. Otherwise, from nuget.
          command: |
            if [ ! -f objs.tar.gz ]; then
                #restore
                dotnet restore
            else
                #unzip objs
                tar -tf objs.tar.gz
                tar -xzf objs.tar.gz
                echo "Restore skipped."
            fi

  revert-migrations:
    description: Revert data migration
    parameters:
      workflow_id:
        type: string
      checkpoint:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export PATH="$PATH:/root/.dotnet/tools"

            SUCCESS=$(curl --insecure  https://kvdb.io/WKCCFAMrtN3WZDXYYmfZDg/migration_<<parameters.workflow_id>>)
            echo ${SUCCESS}
            if [[ "${SUCCESS}" == "1" ]]
            then
              echo "Revert migration to <<parameters.checkpoint>>"
              export MIGRATION_RUN=$(dotnet ef database update <<parameters.checkpoint>> \
              --project ./src/Udacity.DevOps.Capstone.EntityFrameworkCore \
              --connection "${CONNECTIONSTRINGS__DEFAULT}" \
              --no-build)
            fi

  destroy_environment:
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name capstone-backend-<<parameters.workflow_id>>

jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - checkout
      - list-packages
      - restore-packages
      - run: 
          name: Lint
          command: |
            dotnet format -v diagnostic --verify-no-changes --no-restore
      - run: 
          name: Build
          command: |
            dotnet build --no-restore -c Release
      - copy-obj
      - save_cache:
          key: dotnet-packages-v1-{{ checksum "packages.txt" }}
          paths:
            - ~/.nuget/packages
            - ./objs.tar.gz

  test: 
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0    
    steps:
      - checkout
      - list-packages
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "packages.txt" }}
      - restore-packages
      - run: 
          name: Test
          command: |
            dotnet test --no-restore

  build-docker:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: tam892007/udacity-devops-capstone
          path: ./src/Udacity.DevOps.Capstone.Blazor
          tag: latest
      - docker/push:
          digest-path: /tmp/digest.txt
          image: tam892007/udacity-devops-capstone
          tag: latest
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"  

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloud-formation/backend.yml \
              --stack-name "capstone-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=capstone
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4f:f7:9b:46:93:d6:90:c7:94:b2:f2:a0:3f:20:41:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - checkout
      - install-aws-cli
      - list-packages
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "packages.txt" }}
      - restore-packages
      - run:
          name: Install EF Tool
          command: |
            dotnet tool install --global dotnet-ef
      - run:
          name: Build
          command: |
            dotnet build --no-restore
      - run:
          name: Set migration checkpoint
          command: |
            export PATH="$PATH:/root/.dotnet/tools"

            # List all migrations
            echo "0" >> migration_list.txt 
            export MIGRATION_LIST=$(dotnet ef migrations list \
              --project ./src/Udacity.DevOps.Capstone.EntityFrameworkCore \
              --connection "${CONNECTIONSTRINGS__DEFAULT}" \
              --no-build)
            echo "${MIGRATION_LIST}" >> migration_list.txt
            
            # Store checkpoint
            export CHECKPOINT=$(grep "(Pending)" migration_list.txt -v | tail -1)
            echo "export CHECKPOINT=${CHECKPOINT}" >> $BASH_ENV
            cat $BASH_ENV
      - run:
          name: Run migration and send results to kvdb.io
          command: |
            export PATH="$PATH:/root/.dotnet/tools"

            # Run and save the migration output
            export MIGRATION_RUN=$(dotnet ef database update \
              --project ./src/Udacity.DevOps.Capstone.EntityFrameworkCore \
              --connection "${CONNECTIONSTRINGS__DEFAULT}" \
              --no-build)
            echo "${MIGRATION_RUN}" >> migration_run.txt

            if grep -q "Done." migration_run.txt
            then
                echo "Save value to kvdb.io"
                curl --insecure https://kvdb.io/WKCCFAMrtN3WZDXYYmfZDg/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - run: |
          cp $BASH_ENV ~/bash.env
      - persist_to_workspace:
          root: ~/
          paths:
            - bash.env
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-web:
      docker:
        - image: mcr.microsoft.com/dotnet/sdk:7.0
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["4f:f7:9b:46:93:d6:90:c7:94:b2:f2:a0:3f:20:41:03"]
        - attach_workspace:
            at: ~/
        - run: |
            cat ~/bash.env >> $BASH_ENV
        - install-aws-cli
        - run:
            name: Install EF Tool
            command: |
              dotnet tool install --global dotnet-ef
        - run:
            name: Install python
            command: |
              apt-get install python -y
        - run:
            name: Install ansible
            command: |
              apt-get install ansible -y
        - run:
            name: Deploy backend
            command: |
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy.yml --ssh-common-args='-o StrictHostKeyChecking=no'
        - destroy_environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            checkpoint: ${CHECKPOINT}

  smoke-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Install EF Tool
          command: |
            dotnet tool install --global dotnet-ef
      - attach_workspace:
          at: ~/
      - run: |
          cat ~/bash.env >> $BASH_ENV
      - run:
          name: Get web url
          command: |
            export BACKEND_ORIGIN=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo "export WEB_URL=http://${BACKEND_ORIGIN}:8080" >> $BASH_ENV
            cat $BASH_ENV
      - run:
          name: Smoke test.
          command: |
            echo "${WEB_URL}"
            if curl -I --retry 10 --retry-connrefused --retry-max-time 60 "${WEB_URL}" | grep "ok"
            then
              #Stop here
              exit 0
            else
              exit 1
            fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            checkpoint: ${CHECKPOINT}

  promote:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - checkout
      - run:
          name: Install EF Tool
          command: |
            dotnet tool install --global dotnet-ef
      - install-aws-cli
      - attach_workspace:
          at: ~/
      - run: |
          cat ~/bash.env >> $BASH_ENV
      - run:
          name: Keep OLD stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "export OldWorkflowID=${OldWorkflowID}" >> $BASH_ENV
            echo OldWorkflowID: "${OldWorkflowID}"
      - run:
          name: Update cloudfront distribution
          command: |
            export BACKEND_ORIGIN=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo "${BACKEND_ORIGIN}"
            aws cloudformation deploy \
              --template-file .circleci/cloud-formation/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides BackendOrigin="${BACKEND_ORIGIN}" WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity-devops-capstone
      - run: |
          cp $BASH_ENV ~/bash.env
      - persist_to_workspace:
          root: ~/
          paths:
            - bash.env
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            checkpoint: ${CHECKPOINT}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: |
          cat ~/bash.env >> $BASH_ENV
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
      - run:
          name: Remove old stacks and files
          command: |
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "DELETE OLD STACK !!!"
              aws cloudformation delete-stack --stack-name "capstone-backend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build
      - test:
          requires: [build]
      - docker/hadolint:
          dockerfiles: ./src/Udacity.DevOps.Capstone.Blazor/Dockerfile
      - build-docker:
          requires: [docker/hadolint, test]
      - deploy-infrastructure:
          requires: [build-docker]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-web:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-web]
      - promote:
          requires: [smoke-test]
      - cleanup:
          requires: [promote]