version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

commands:
  list-packages:
    steps:
      - run:
          name: Extract the package reference lines
          command: |
            cp ./src/*/*.csproj .
            for path in $(ls *.csproj)
            do
                echo $path
                while read -r line; do
                    if [[ $line =~ "<PackageReference" ]]; then
                        echo "${line// /}" >> packages.txt
                    fi  
                done < "$path"
            done
            rm *.csproj
            cat packages.txt

  copy-obj:
    steps:
      - run:
          name: Copy obj folders
          command: |
            for path in $(find . -regex '.*/obj')
            do
                echo $path
                mkdir -p objs/$path
                cp -r $path/* objs/$path
            done
            tar -czf objs.tar.gz -C objs .

  restore-packages:
    steps:
      - run:
          name: Restore package from cache if no changes. Otherwise, from nuget.
          command: |
            if [ ! -f objs.tar.gz ]; then
                #restore
                dotnet restore
            else
                #unzip objs
                tar -tf objs.tar.gz
                tar -xzf objs.tar.gz --strip-components=2
                echo "untar completed ======"
                ls
                ls ./src/Udacity.DevOps.Capstone.Blazor/obj
                echo "Restore skipped."
            fi

jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - checkout
      - list-packages
      - restore-packages
      - run: 
          name: Lint
          command: |
            dotnet format -v diagnostic --verify-no-changes --no-restore
      - run: 
          name: Build
          command: |
            dotnet build --no-restore -c Release
      - copy-obj
      - save_cache:
          key: dotnet-packages-{{ checksum "packages.txt" }}
          paths:
            - ~/.nuget/packages
            - ./objs.tar.gz

  test: 
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0    
    steps:
      - checkout
      - list-packages
      - restore_cache:
          keys:
            - dotnet-packages-{{ checksum "packages.txt" }}
      - restore-packages
      - run: 
          name: Test
          command: |
            dotnet test --no-build -v m
  
  build-docker:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0 
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - list-packages
      - restore_cache:
          keys:
            - dotnet-packages-{{ checksum "packages.txt" }}
      - restore-packages
      - run: 
          name: Build and Push Docker images
          command: |
            dotnet publish ./src/Udacity.DevOps.Capstone.Blazor --no-build --os linux --arch x64 -p:PublishProfile=DefaultContainer -p:ContainerRegistry=registry.hub.docker.com -c Release  

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloud-formation/backend.yml \
              --stack-name "capstone-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=capstone
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["53:7a:00:5f:4a:f7:0d:0c:b0:4e:93:b0:53:fa:d9:83"]
      - attach_workspace:
          at: ~/
      - aws-cli/setup
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

workflows:
  default:
    jobs:
      - build
      - test:
          requires: [build]
      - build-docker:
          requires: [test]
      # - deploy-infrastructure
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]